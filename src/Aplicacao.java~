//import java.time.format.DateTimeParseException;
import java.util.Scanner;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

public class Aplicacao {
    public final static Scanner scanner = new Scanner(System.in);
    public final static ListaCorridas lista = new ListaCorridas("Minhas Corridas");
    private static final DateTimeFormatter DATA_FMT = DateTimeFormatter.ofPattern("dd/MM/yyyy");

    public static void main(String[] args) {
        int opcao;

        exibirLogo();

        do {
            exibirMenu();
            System.out.println("üîπ Escolha uma op√ß√£o:");
            System.out.print(">>> ");
            opcao = menuInteracao();

            switch (opcao) {
                case 1:
                    Corrida c = cadastrarCorrida(); // Cadastra uma corrida criando uma inst√¢ncia da classe Corrida e ent√£o interage com o usu√°rio pra colocar informa√ß√µes sobre a corrida
                    lista.adicionarCorrida(c); // Adiciona a corrida na lista
                    exibirSeparador();
                    System.out.println("Corrida cadastrada com sucesso!");
                    break;
                case 2:
                    exibirSeparador();
                    System.out.println("üîπ Lista de corridas por data:");
                    //for (Corrida rc : lista.listarPorData()) System.out.println(rc);
                    exibirLista((ListaCorridas) lista.listarPorData());
                    break;
                case 3:
                    exibirSeparador();
                    System.out.print("üîπ Buscar corrida por nome:\n>>> ");
                    String termo = scanner.nextLine();
                    for (Corrida rc : lista.buscarPorNome(termo)) System.out.println(rc);
                    break;
                case 4:
                    exibirSeparador();
                    System.out.println("üîπ Lista de corridas por dist√¢ncia:");
                    for (Corrida rc : lista.listarPorDistanciaENome()) System.out.println(rc);
                    break;
                case 5:
                    exibirSeparador();
                    System.out.println("üîπ Lista de corridas por dificuldade:");
                    for (Corrida rc : lista.listarPorDificuldade()) System.out.println(rc);
                    break;
                case 6:
                    exibirSeparador();
                    System.out.println("üîπ Resumo de desempenho:");
                    exibirDesempenho();
                    break;
                case 7:
                    exibirSeparador();
                    System.out.print("üîπ Excluir corrida existente:\n>>> Parte do nome: ");
                    String del = scanner.nextLine();
                    boolean removed = lista.removerPorTrechoNome(del);
                    System.out.println(removed ? "Corrida exclu√≠da." : "Nenhuma corrida √∫nica encontrada.");
                    break;
                case 8:
                    exibirSeparador();
                    System.out.println("üîπ Modificar corrida existente:");
                    if (lista.getNumeroCorridas() == 0) {
                        System.out.println("Nenhuma corrida cadastrada.");
                        break;
                    }
                    // listar com √≠ndice
                    for (int i = 0; i < lista.getNumeroCorridas(); i++) {
                        System.out.println(i + ": " + lista.listarPorData().get(i));
                    }
                    System.out.print(">>> √çndice da corrida: ");
                    int idx = Integer.parseInt(scanner.nextLine());
                    if (idx < 0 || idx >= lista.getNumeroCorridas()) {
                        System.out.println("√çndice inv√°lido.");
                        break;
                    }
                    Corrida sel = lista.listarPorData().get(idx);
                    // submenu campo
                    submenuModificarCorrida();
                    modificarCorrida(sel);
                    System.out.println("Corrida modificada com sucesso.");
                    break;
                case 0:
                    exibirSeparador();
                    System.out.println("üî∏ Encerrando o programa...");
                    break;
                case 101:
                    exibirSeparador();
                    System.out.println("üîπ Populando corridas de teste...");
                    popularCorridas(lista);
                    break;
                default:
                    System.out.println();
                    System.out.println("üî∏ Op√ß√£o inv√°lida. Tente novamente.");
                    System.out.println();
            }
        } while (opcao != 0);

        scanner.close();
    }

    public static LocalDate validarData(String data) {
        while (true) {
            if (data.isBlank()) return LocalDate.now();
            try {
                LocalDate parsedDate = LocalDate.parse(data, DATA_FMT);
                if (parsedDate.isAfter(LocalDate.now())) {
                    System.out.println("Data n√£o pode ser futura. Tente novamente.");
                } else {
                    return parsedDate;
                }
            } catch (Exception e) {
                System.out.println("Formato inv√°lido. Use dd/MM/yyyy.");
            }
            System.out.print(">>> ");
            data = scanner.nextLine();
        }
    }


    /*
     * L√™ uma linha de texto do usu√°rio, exibindo um prompt.

    private static String validarString(String prompt) {
        System.out.println(prompt);
        return scanner.nextLine().trim();
    }

    /*
     * L√™ um inteiro dentro de um intervalo [min, max], repetindo em caso de erro.
    */
    private static int lerInteiro() {
        while (true) {
            System.out.println(">>> Campo:");
            String s = scanner.nextLine().trim();
            try {
                int v = Integer.parseInt(s);
                if (v < 1 || v > 5) throw new NumberFormatException();
                return v;
            } catch (NumberFormatException e) {
                System.out.println("Entrada inv√°lida. Insira um n√∫mero entre " + 1 + " e " + 5 + ".");
            }
        }
    }

    /*
     * L√™ uma data no formato dd/MM/yyyy ou retorna hoje se vazio, repetindo em caso de erro.

    private static LocalDate lerData(String prompt) {
        while (true) {
            System.out.println(prompt);
            String s = scanner.nextLine().trim();
            if (s.isEmpty()) return LocalDate.now();
            try {
                return LocalDate.parse(s, DATA_FMT);
            } catch (DateTimeParseException e) {
                System.out.println("Data inv√°lida. Use o formato dd/MM/yyyy.");
            }
        }
    } */

    /**
     * Popular a lista com dados de exemplo para testes.
     */
    public static void popularCorridas(ListaCorridas lista) {
        DateTimeFormatter fmt = DateTimeFormatter.ofPattern("dd/MM/yyyy");

        Corrida c1 = new Corrida("Maratona UFPR 100 anos");
        c1.setData(LocalDate.now());
        c1.setDistancia(10000);
        c1.setTempo(50);
        c1.setDificuldade(10);

        Corrida c2 = new Corrida("nduia[a");
        c2.setData(LocalDate.parse("24/09/2001", fmt));
        c2.setDistancia(1500);
        c2.setTempo(5);
        c2.setDificuldade(3);

        Corrida c3 = new Corrida("sono");
        c3.setData(LocalDate.parse("10/05/2025", fmt));
        c3.setDistancia(1200);
        c3.setTempo(2);
        c3.setDificuldade(2);

        Corrida c4 = new Corrida("maratona contra saudade");
        c4.setData(LocalDate.parse("08/04/2025", fmt));
        c4.setDistancia(5000);
        c4.setTempo(40);
        c4.setDificuldade(10);

        lista.adicionarCorrida(c1);
        lista.adicionarCorrida(c2);
        lista.adicionarCorrida(c3);
        lista.adicionarCorrida(c4);

        System.out.println("‚úÖ Corridas cadastradas automaticamente com base na lista fornecida!");
    }
    public static Corrida cadastrarCorrida() {
        exibirSeparador();
        System.out.println("üîπ Cadastrar nova corrida:");
        System.out.print(">>> Nome: ");
        String nome = scanner.nextLine();
        Corrida c = new Corrida(nome);

        exibirSeparador();
        System.out.print("Digite a data (dd/MM/yyyy) ou ENTER para hoje:\n>>> ");
        String dataStr = scanner.nextLine();
        LocalDate data = validarData(dataStr);
        c.setData(data);

        exibirSeparador();
        System.out.print("Digite dist√¢ncia (m):\n>>> ");
        c.setDistancia(Integer.parseInt(scanner.nextLine()));

        exibirSeparador();
        System.out.print("Digite tempo (min):\n>>> ");
        c.setTempo(Integer.parseInt(scanner.nextLine()));

        exibirSeparador();
        System.out.print("Digite dificuldade (1 a 10):\n>>> ");
        c.setDificuldade(Integer.parseInt(scanner.nextLine()));

        return c;
    }
    public static void modificarCorrida(Corrida sel)  {
        int campo = lerInteiro();
        System.out.print("Digite o novo valor:\n>>> ");
        String valor = scanner.nextLine();
        sel.modificar(campo, valor);
    }

    public static void exibirLista(String como, ListaCorridas as) {
        List<Corrida> corridas;

        switch (modo) {
            case 1:
                corridas = lista.getCorridas(); // lista como est√°
                break;
            case 2:
                corridas = lista.listarPorData(); // ordenada por data
                break;
            case 3:
                corridas = lista.listarPorDistancia(); // ordenada por dist√¢ncia
                break;
            case 4:
                corridas = lista.listarPorTempo(); // ordenada por tempo
                break;
            default:
                System.out.println("‚ö†Ô∏è Modo de exibi√ß√£o inv√°lido.");
                return;
        }

        for (Corrida rc : corridas) {
            System.out.println(rc);
        }
    }


    public static int menuInteracao() {
        int opcao;
        String entrada = scanner.nextLine();
        try {
            opcao = Integer.parseInt(entrada);
        } catch (NumberFormatException e) {
            opcao = -1;
        }
        return opcao;
    }
    public static void exibirLogo() {
        System.out.println("           _________ _______  _______  _______  _        _______  _______ ");
        System.out.println("|\\     /|  \\__   __/(  ____ )(  ___  )(  ____ \\| \\    /\\(  ____ \\(  ____ )");
        System.out.println("( \\   / )     ) (   | (    )|| (   ) || (    \\/|  \\  / /| (    \\/| (    )|");
        System.out.println(" \\ (_) /      | |   | (____)|| (___) || |      |  (_/ / | (__    | (____)|");
        System.out.println("  ) _ (       | |   |     __)|  ___  || |      |   _ (  |  __)   |     __)");
        System.out.println(" / ( ) \\      | |   | (\\ (   | (   ) || |      |  ( \\ \\ | (      | (\\ (   ");
        System.out.println("( /   \\ )     | |   | ) \\ \\__| )   ( || (____/\\|  /  \\ \\| (____/\\| ) \\ \\__");
        System.out.println("|/     \\|     )_(   |/   \\__/|/     \\|(_______/|_/    \\/(_______/|/   \\__/");
    }
    public static void exibirMenu() {
        System.out.println("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        System.out.println("‚ïë     CONTROLE DE CORRIDAS üèÉ      ‚ïë");
        System.out.println("‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£");
        System.out.println("‚ïë 1) Cadastrar nova corrida        ‚ïë");
        System.out.println("‚ïë 2) Listar corridas por data      ‚ïë");
        System.out.println("‚ïë 3) Buscar corrida por nome       ‚ïë");
        System.out.println("‚ïë 4) Listar por dist√¢ncia          ‚ïë");
        System.out.println("‚ïë 5) Listar por dificuldade        ‚ïë");
        System.out.println("‚ïë 6) Resumo de desempenho          ‚ïë");
        System.out.println("‚ïë 7) Excluir corrida existente     ‚ïë");
        System.out.println("‚ïë 8) Modificar corrida existente   ‚ïë");
        System.out.println("‚ïë 0) Sair                          ‚ïë");
        System.out.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
        System.out.println();
    }
    public static void submenuModificarCorrida() {
        System.out.println("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        System.out.println("‚ïë      MODIFICAR CORRIDA üèÉ        ‚ïë");
        System.out.println("‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£");
        System.out.println("‚ïë 1) Modificar nome                ‚ïë");
        System.out.println("‚ïë 2) Modificar data                ‚ïë");
        System.out.println("‚ïë 3) Modificar dist√¢ncia           ‚ïë");
        System.out.println("‚ïë 4) Modificar tempo               ‚ïë");
        System.out.println("‚ïë 5) Modificar dificuldade         ‚ïë");
        System.out.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
        System.out.println();
        System.out.print(">>> Campo: ");
    }

    public static void exibirDesempenho(){
        System.out.println("N√∫mero de corridas: " + lista.getNumeroCorridas());
        System.out.println("Dist√¢ncia total: " + lista.getDistanciaTotal() + "m");
        System.out.println("Tempo total: " + lista.getTempoTotal() + "min");
        System.out.printf("Tempo m√©dio: %.2fmin\n", lista.getTempoMedio());
    }
    public static void exibirSeparador() {
        System.out.println("-..- - .-. .- -.-. -.- . .-.-..- - .-. .- -.-. -.- . .-.");
    }
}
